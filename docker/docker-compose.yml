networks:
  web:
    external: true
services:
  traefik:
    image: traefik:v3.5.0
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    env_file: .env
    environment:
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
      - ./certs/:/var/traefik/certs/:rw
    networks: [web]
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.middlewares=auth
      - traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_AUTH}
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.tls.certresolver=cloudflare

  ui:
    container_name: ui
    image: ghcr.io/togethercrew/reputo/ui:${IMAGE_TAG}
    restart: unless-stopped
    networks: [web]
    labels:
      - traefik.enable=true
      - traefik.http.routers.ui.rule=Host(`${UI_DOMAIN}`)
      - traefik.http.routers.ui.tls=true
      - traefik.http.routers.ui.tls.certresolver=cloudflare
      - traefik.http.routers.ui.entrypoints=websecure
      - traefik.http.services.ui.loadbalancer.server.port=8080
      - com.centurylinklabs.watchtower.enable=true
  api:
    container_name: api
    image: ghcr.io/togethercrew/reputo/api:${IMAGE_TAG}
    restart: unless-stopped
    networks: [web]
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`${API_DOMAIN}`)
      - traefik.http.routers.api.tls=true
      - traefik.http.routers.api.tls.certresolver=cloudflare
      - traefik.http.routers.api.entrypoints=websecure
      - traefik.http.routers.api.middlewares=api-strip,api-cors
      - traefik.http.services.api.loadbalancer.server.port=3000
      - traefik.http.middlewares.api-strip.stripprefix.prefixes=/api
      - traefik.http.middlewares.api-cors.headers.accessControlAllowMethods=GET,OPTIONS,PUT,POST,DELETE
      - traefik.http.middlewares.api-cors.headers.accessControlAllowOriginList=${ALLOWED_ORIGINS:-*}
      - com.centurylinklabs.watchtower.enable=true

  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_POLL_INTERVAL=60
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_RESTARTING=true
      - WATCHTOWER_LABEL_ENABLE=true
      - WATCHTOWER_ROLLING_RESTART=true
    command: --interval 60 --cleanup
    labels:
      - com.centurylinklabs.watchtower.enable=false
    networks: [web]
