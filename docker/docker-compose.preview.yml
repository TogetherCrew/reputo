version: '3.9'

networks:
    web:

services:
    traefik:
        image: traefik:v3.4
        container_name: traefik
        ports:
            - '80:80'
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
        networks: [web]
        healthcheck:
            test: ['CMD', 'traefik', 'healthcheck', '--ping']
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 10s
        command:
            - --api=true
            - --ping=true
            - --providers.docker=true
            - --providers.docker.exposedByDefault=false
            - --entrypoints.web.address=:80
            - --metrics.prometheus=true
            - --metrics.prometheus.addRoutersLabels=true

    ui:
        container_name: ui
        depends_on:
            - traefik
        build:
            context: ..
            dockerfile: docker/Dockerfile
            target: ui
        restart: unless-stopped
        networks: [web]
        labels:
            - traefik.enable=true
            - traefik.http.routers.ui.rule=Host(`${PULLPREVIEW_PUBLIC_DNS}`)
            - traefik.http.routers.ui.entrypoints=web

    api:
        container_name: api
        depends_on:
            - traefik
        build:
            context: ..
            dockerfile: docker/Dockerfile
            target: api
        restart: unless-stopped
        networks: [web]
        labels:
            - traefik.enable=true
            - traefik.http.routers.api.rule=Host(`api.${PULLPREVIEW_PUBLIC_DNS}`)
            - traefik.http.routers.api.entrypoints=web
            - traefik.http.routers.api.middlewares=api-strip,api-cors
            - traefik.http.services.api.loadbalancer.server.port=3000
            - traefik.http.middlewares.api-strip.stripprefix.prefixes=/api
            - traefik.http.middlewares.api-cors.headers.accesscontrolallowmethods=GET,OPTIONS,PUT,POST,DELETE
            - traefik.http.middlewares.api-cors.headers.accesscontrolalloworiginlist=*
